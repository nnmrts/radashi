# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[remote.github]
owner = "radashi-org"
repo = "radashi"

[changelog]
# template for the changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% if get_env(name="STRIP_TAG") != "true" -%}
    {% if version -%}
        ## [radashi@{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
    {% else -%}
        ## [radashi@beta]
    {% endif -%}

    ### Details\
{% endif -%}

{% for group, commits in commits | group_by(attribute="group") %}
    {% if get_env(name="STRIP_TAG") == "true" -%}
        ### {{ group | upper_first }}
    {% else -%}
        #### {{ group | upper_first }}
    {% endif -%}
    {%- for commit in commits %}
        - {% if commit.scope %}**({{ commit.scope }})** {% endif %}{{ commit.message | upper_first | trim }}\
            {% if commit.github.username %} by [@{{ commit.github.username }}](https://github.com/{{ commit.github.username }}){%- endif -%}
            {% if commit.github.pr_number %} in \
              [#{{ commit.github.pr_number }}]({{ self::remote_url() }}/pull/{{ commit.github.pr_number }})
            {% else %} in \
              [{{ commit.id | truncate(length=7, end="") }}]({{ self::remote_url() }}/commit/{{ commit.id }})
            {%- endif -%}
    {% endfor %}
{% endfor %}

{%- if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 %}
  ### New Contributors
{%- endif -%}

{% for contributor in github.contributors | filter(attribute="is_first_time", value=true) %}
  * [@{{ contributor.username }}](https://github.com/{{ contributor.username }}) made their first contribution
    {%- if contributor.pr_number %} in \
      [#{{ contributor.pr_number }}]({{ self::remote_url() }}/pull/{{ contributor.pr_number }}) \
    {%- endif %}
{%- endfor %}\n
"""
# template for the changelog footer
footer = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% for release in releases -%}
    {% if release.version -%}
        {% if release.previous.version %}
            [radashi@{{ release.version | trim_start_matches(pat="v") }}]: \
                {{ self::remote_url() }}/compare/{{ release.previous.version }}..{{ release.version }}
        {% endif -%}
    {% else %}
        [radashi@beta]: {{ self::remote_url() }}/compare/{{ release.previous.version }}..HEAD
    {% endif -%}
{% endfor %}
<!-- generated by git-cliff -->
"""
# remove the leading and trailing whitespace from the templates
trim = true

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # remove issue numbers from commits
  { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "" },
]
# regex for parsing and grouping commits
commit_parsers = [
  { body = ".*security", group = "<!-- 00 -->Security" },
  { body = ".*BREAKING CHANGE:", group = "<!-- 01 -->Breaking changes" },
  { body = "^.*!:", group = "<!-- 01 -->Breaking changes" },
  { message = "^.*: deprecate", group = "<!-- 02 -->Deprecated" },
  { message = "^perf", group = "<!-- 07 -->Performance" },
  { message = "^(fix|chore).perf.:", group = "<!-- 07 -->Performance", scope = "" },
  { message = "^(build|chore|ci|docs|refactor|test|style)", skip = true },
  { message = "^Revert", skip = true },
  { message = "^.*\\(types\\):", group = "<!-- 08 -->Types", scope = "" },
  { message = "^fix", group = "<!-- 06 -->Fixed" },
  { message = "^.*: (add|support)", group = "<!-- 03 -->Added" },
  { message = "^.*: (remove|delete)", group = "<!-- 04 -->Removed" },
  { message = "^.*", group = "<!-- 05 -->Changed" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = true
# regex for matching git tags
tag_pattern = "v[0-9].*"
# regex for ignoring tags
ignore_tags = "beta|alpha|rc"
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
